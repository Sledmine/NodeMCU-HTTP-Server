function urlDecode(a)return a:gsub('%%(%x%x)',function(b)return string.char(tonumber(b,16))end)end;function guessType(c)local d={['.css']='text/css',['.js']='application/javascript',['.html']='text/html',['.png']='image/png',['.jpg']='image/jpeg'}for e,f in pairs(d)do if string.sub(c,-string.len(e))==e or string.sub(c,-string.len(e..'.gz'))==e..'.gz'then return f end end;return'text/plain'end;Res={_skt=nil,_type=nil,_status=nil,_redirectUrl=nil}function Res:new(g)local h={}setmetatable(h,self)self.__index=self;h._skt=g;return h end;function Res:redirect(a,i)i=i or 302;self:status(i)self._redirectUrl=a;self:send(i)end;function Res:type(f)self._type=f end;function Res:status(i)self._status=i end;function Res:send(j)self._status=self._status or 200;self._type=self._type or'text/html'local k='HTTP/1.1 '..self._status..'\r\n'..'Content-Type: '..self._type..'\r\n'..'Content-Length:'..string.len(j)..'\r\n'if self._redirectUrl~=nil then k=k..'Location: '..self._redirectUrl..'\r\n'end;k=k..'\r\n'..j;local function l()if k==''then self:close()else self._skt:send(string.sub(k,1,512))k=string.sub(k,513)end end;self._skt:on('sent',l)l()end;function Res:sendFile(c)if file.exists(c..'.gz')then c=c..'.gz'elseif not file.exists(c)then self:status(404)if c=='404.html'then self:send(404)else self:sendFile('404.html')end;return end;self._status=self._status or 200;local m='HTTP/1.1 '..self._status..'\r\n'self._type=self._type or guessType(c)m=m..'Content-Type: '..self._type..'\r\n'if string.sub(c,-3)=='.gz'then m=m..'Content-Encoding: gzip\r\n'end;m=m..'\r\n'print('* Sending ',c)local n=0;local function l()file.open(c,'r')if file.seek('set',n)==nil then self:close()print('* Finished ',c)else local k=file.read(512)n=n+512;self._skt:send(k)end;file.close()end;self._skt:on('sent',l)self._skt:send(m)end;function Res:close()self._skt:on('sent',function()end)self._skt:on('receive',function()end)self._skt:close()self._skt=nil end;function parseHeader(o,p)local q,q,r,s,t=string.find(o.source,'([A-Z]+) (.+)?(.*) HTTP')if r==nil then q,q,r,s=string.find(o.source,'([A-Z]+) (.+) HTTP')end;local u={}if t~=nil and t~=''then t=urlDecode(t)for v,w in string.gmatch(t,'([^&]+)=([^&]*)&*')do u[v]=w end end;o.method=r;o.query=u;o.path=s;return true end;function staticFile(o,p)local c=''if o.path=='/'then c='index.html'else c=string.gsub(string.sub(o.path,2),'/','_')end;p:sendFile(c)end;httpServer={_srv=nil,_mids={{url='.*',cb=parseHeader},{url='.*',cb=staticFile}}}function httpServer:use(a,x)table.insert(self._mids,#self._mids,{url=a,cb=x})end;function httpServer:close()self._srv:close()self._srv=nil end;function httpServer:listen(y)self._srv=net.createServer(net.TCP)self._srv:listen(y,function(z)z:on('receive',function(g,A)local o={source=A,path='',ip=g:getpeer()}local p=Res:new(g)for B=1,#self._mids do if string.find(o.path,'^'..self._mids[B].url..'$')and not self._mids[B].cb(o,p)then break end end;collectgarbage()end)end)end